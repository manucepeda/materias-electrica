let materias = [];

// Static definition of profile emphasis options - keep in sync with graph.js
const EMPHASIS_OPTIONS = {
  'Electrónica': ['Electrónica Biomédica', 'Sistemas Embebidos', 'Circuitos y Sistemas Electrónicos'],
  'Ingeniería Biomédica': ['Electrónica', 'Ingeniería Clínica', 'Señales', 'Informática']
};

async function load() {
  try {
    // Try to load the new format first (with prerequisites)
    let res = await fetch('data/materias_with_prereqs.json');
    
    // If new format fails, fall back to old format
    if (!res.ok) {
      res = await fetch('data/materias.json');
    }
    
    materias = await res.json();
    
    // Initialize all filters
    document.getElementById('search').addEventListener('input', render);
    document.getElementById('semestre').addEventListener('input', render);
    document.getElementById('creditos').addEventListener('input', render);
    document.getElementById('perfil').addEventListener('change', handlePerfilChange);
    document.getElementById('dictationSemester').addEventListener('change', render);
    
    // Set up the emphasis selector
    const emphasisSelect = document.getElementById('emphasis');
    if (emphasisSelect) {
      emphasisSelect.addEventListener('change', render);
    }
    
    render();
  } catch (e) {
    console.error('Error cargando datos de materias', e);
    document.getElementById('grid').innerHTML = `
      <p style="color:#b91c1c;">No se pudieron cargar los datos de materias. ¿Están los archivos y los paths correctos?</p>`;
  }
}

function render() {
  const q = document.getElementById('search').value.toLowerCase();
  const semestre = document.getElementById('semestre').value;
  const creditos = document.getElementById('creditos').value;
  const perfil = document.getElementById('perfil').value;
  const enfasis = document.getElementById('emphasis')?.value;
  const dictationSemester = document.getElementById('dictationSemester').value;

  const filtered = materias.filter(m => {
    // Match search query (in name or code)
    const matchQ = !q || 
                  m.nombre.toLowerCase().includes(q) || 
                  (m.codigo && m.codigo.toLowerCase().includes(q));
    
    // Match semester
    const matchSem = !semestre || String(m.semestre) === semestre;
    
    // Match credits
    const matchCred = !creditos || String(m.creditos) === creditos;
    
    // Match profile
    const matchPerfil = !perfil || (m.perfiles && m.perfiles.includes(perfil));
    
    // Match emphasis if both profile and emphasis are selected
    const matchEnfasis = !enfasis || !perfil || 
      (m.enfasis && m.enfasis[perfil] && m.enfasis[perfil].includes(enfasis));
    
    // Match dictation semester
    let dictationMatch = true;
    if (dictationSemester !== 'all') {
      if (!m.dictation_semester) {
        // Default value if not specified (backward compatibility)
        const defaultDictation = m.semestre % 2 === 1 ? '1' : '2';
        dictationMatch = dictationSemester === 'both' ? false : dictationSemester === defaultDictation;
      } else {
        // Check the actual dictation semester value
        if (dictationSemester === 'both') {
          dictationMatch = m.dictation_semester === 'both';
        } else {
          dictationMatch = m.dictation_semester === dictationSemester || m.dictation_semester === 'both';
        }
      }
    }

    return matchQ && matchSem && matchCred && matchPerfil && matchEnfasis && dictationMatch;
  });

  // Sort by semester then by name
  filtered.sort((a, b) => {
    if (a.semestre !== b.semestre) {
      return a.semestre - b.semestre;
    }
    return a.nombre.localeCompare(b.nombre);
  });

  const grid = document.getElementById('grid');
  grid.innerHTML = filtered.map(m => {
    // Get dictation semester text
    let dictationText = '';
    if (m.dictation_semester) {
      if (m.dictation_semester === 'both') {
        dictationText = '<span class="dictation-tag">Ambos semestres</span>';
      } else if (m.dictation_semester === '1') {
        dictationText = '<span class="dictation-tag">Semestre impar</span>';
      } else if (m.dictation_semester === '2') {
        dictationText = '<span class="dictation-tag">Semestre par</span>';
      }
    }
    
    // Create special tags for Control profile
    const controlTags = [];
    if (m.perfiles && m.perfiles.includes('Control')) {
      if (m.core) {
        controlTags.push('<span class="tag core-tag">Core</span>');
      } else if (m.opcional_perfil) {
        controlTags.push('<span class="tag opcional-tag">Opcional</span>');
      } else if (m.opcional_sugerida) {
        controlTags.push('<span class="tag sugerida-tag">Sugerida</span>');
      }
    }
    
    // Generate prerequisites info if available
    let prereqInfo = '';
    if (m.prerequisitos && m.prerequisitos.length > 0) {
      const prereqsList = m.prerequisitos.map(p => p.codigo).join(', ');
      prereqInfo = `<div class="prereq-info">Previas: ${prereqsList}</div>`;
    }
    
    // Generate emphasis tags if available
    const emphasisTags = [];
    if (m.enfasis) {
      Object.entries(m.enfasis).forEach(([profile, emphases]) => {
        emphases.forEach(emphasis => {
          emphasisTags.push(`<span class="tag enfasis-tag" title="Énfasis: ${emphasis} (${profile})">${emphasis}</span>`);
        });
      });
    }
    
    return `
      <article>
        <h2 style="margin:0;font-size:1.05rem;font-weight:700;">
          <span class="codigo">${m.codigo || ''}</span> ${m.nombre}
        </h2>

        <div class="muted">
          <span style="margin-right:.75rem;">Semestre: <b>${m.semestre}</b></span>
          <span>Créditos: <b>${m.creditos}</b></span>
          ${m.exam_only ? '<span class="exam-only-tag">Libre</span>' : ''}
          ${dictationText}
        </div>

        <div style="margin-top:0.5rem;">
          ${m.perfiles ? m.perfiles.map(p => `<span class="tag perfil-tag" title="Perfil: ${p}">${p}</span>`).join(' ') : ''}
          ${controlTags.join(' ')}
          ${emphasisTags.join(' ')}
        </div>
        
        ${prereqInfo}
      </article>
    `;
  }).join('');

  document.getElementById('count').textContent = `${filtered.length} materia(s)`;
  
  // Show message if no results
  if (filtered.length === 0) {
    grid.innerHTML = `
      <div style="grid-column: 1 / -1; text-align: center; padding: 2rem; color: #6b7280;">
        No se encontraron materias con los filtros seleccionados.
      </div>`;
  }
}

// Handles profile change to update the emphasis options
function handlePerfilChange() {
  const perfilSelect = document.getElementById('perfil');
  const selectedPerfil = perfilSelect.value;
  const emphasisSelect = document.getElementById('emphasis');
  
  // Reset the emphasis options
  emphasisSelect.innerHTML = '';
  
  if (!selectedPerfil) {
    // No profile selected
    emphasisSelect.innerHTML = '<option value="">Seleccione un perfil primero</option>';
    emphasisSelect.disabled = true;
    emphasisSelect.style.display = 'none';
  } else if (EMPHASIS_OPTIONS[selectedPerfil]) {
    // Profile has emphasis options
    emphasisSelect.disabled = false;
    
    // Add default "All emphasis" option
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Todos los énfasis';
    emphasisSelect.appendChild(defaultOption);
    
    // Add emphasis options
    EMPHASIS_OPTIONS[selectedPerfil].forEach(emphasis => {
      const option = document.createElement('option');
      option.value = emphasis;
      option.textContent = emphasis;
      emphasisSelect.appendChild(option);
    });
    
    emphasisSelect.style.display = 'inline-block';
  } else {
    // Profile has no emphasis options
    emphasisSelect.innerHTML = '<option value="">No hay énfasis para este perfil</option>';
    emphasisSelect.disabled = true;
    emphasisSelect.style.display = 'none';
  }
  
  render();
}

// Load data when the page loads
document.addEventListener('DOMContentLoaded', load);
