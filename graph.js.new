let materias = [];
let selectedPerfil = '';
let selectedEmphasis = '';
let approvedSubjects = new Set(); // Subjects that are approved but not exonerated
let exoneratedSubjects = new Set(); // Subjects that are exonerated
let totalCredits = 0;
let showExamOnlySubjects = false;
let selectedDictationSemester = 'all';
let selectedCreditFilter = 'all';

// Static definition of profile emphasis options
const EMPHASIS_OPTIONS = {
  'Electrónica': ['Electrónica Biomédica', 'Sistemas Embebidos', 'Circuitos y Sistemas Electrónicos'],
  'Ingeniería Biomédica': ['Electrónica', 'Ingeniería Clínica', 'Señales', 'Informática']
};

// Profiles that don't have emphasis options
const NO_EMPHASIS_PROFILES = ['Control', 'Sistemas Eléctricos de Potencia'];

async function load() {
  try {
    const res = await fetch('data/materias_with_prereqs.json');
    materias = await res.json();
    
    // Add event listeners to profile and emphasis selectors
    document.getElementById('perfil').addEventListener('change', handleProfileChange);
    document.getElementById('emphasis').addEventListener('change', renderGraph);
    
    // Add event listeners to the new filters
    document.getElementById('dictationSemester').addEventListener('change', handleDictationSemesterChange);
    document.getElementById('examOnlyFilter').addEventListener('click', toggleExamOnlyFilter);
    document.getElementById('creditFilter').addEventListener('change', handleCreditFilterChange);
    
    // Initialize the graph (empty)
    renderGraph();
  } catch (e) {
    console.error('Error loading materias_with_prereqs.json', e);
    document.getElementById('tree').innerHTML = `
      <p style="color:#b91c1c;">No se pudo cargar data/materias_with_prereqs.json. ¿Está el archivo y el path correcto?</p>`;
  }
}

function handleDictationSemesterChange() {
  selectedDictationSemester = document.getElementById('dictationSemester').value;
  renderGraph();
}

function toggleExamOnlyFilter() {
  showExamOnlySubjects = !showExamOnlySubjects;
  const button = document.getElementById('examOnlyFilter');
  if (showExamOnlySubjects) {
    button.classList.add('active');
    button.textContent = 'Ocultar materias libres';
  } else {
    button.classList.remove('active');
    button.textContent = 'Mostrar materias libres';
  }
  renderGraph();
}

function handleCreditFilterChange() {
  selectedCreditFilter = document.getElementById('creditFilter').value;
  renderGraph();
}

function handleProfileChange() {
  selectedPerfil = document.getElementById('perfil').value;
  const emphasisSelect = document.getElementById('emphasis');
  
  // Reset subject status when profile changes
  approvedSubjects.clear();
  exoneratedSubjects.clear();
  totalCredits = 0;
  
  // Clear emphasis selection
  selectedEmphasis = '';
  
  // Update emphasis options based on selected profile
  if (selectedPerfil && EMPHASIS_OPTIONS[selectedPerfil]) {
    // Profile has emphasis options
    emphasisSelect.innerHTML = '';
    emphasisSelect.disabled = false;
    
    // Add default "All emphasis" option
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Todos los énfasis';
    emphasisSelect.appendChild(defaultOption);
    
    // Add emphasis options
    EMPHASIS_OPTIONS[selectedPerfil].forEach(emphasis => {
      const option = document.createElement('option');
      option.value = emphasis;
      option.textContent = emphasis;
      emphasisSelect.appendChild(option);
    });
    
    emphasisSelect.style.display = 'inline-block';
  } else {
    // Profile has no emphasis options or no profile selected
    emphasisSelect.innerHTML = '<option value="">Seleccione un perfil primero</option>';
    emphasisSelect.disabled = true;
    emphasisSelect.style.display = 'none';
  }
  
  renderGraph();
}

function renderGraph() {
  const treeContainer = document.getElementById('tree');
  if (selectedPerfil) {
    selectedEmphasis = document.getElementById('emphasis').value;
  }
  
  if (!selectedPerfil) {
    treeContainer.innerHTML = `
      <div style="text-align: center; padding: 50px; color: #5a6b7b;">
        Seleccione un perfil para visualizar el grafo de materias
      </div>`;
    return;
  }
  
  // Filter materias by selected profile and emphasis if selected
  let filteredMaterias = materias.filter(m => {
    if (!m || !m.perfiles) return false;
    
    // Basic filter by profile
    const profileMatch = m.perfiles.includes(selectedPerfil);
    
    // If emphasis is selected and profile supports emphasis, check if subject belongs to that emphasis
    let emphasisMatch = true;
    if (selectedEmphasis && EMPHASIS_OPTIONS[selectedPerfil]) {
      // For profiles with emphasis like Electrónica and Ingeniería Biomédica
      emphasisMatch = false;
      
      // Check if the subject has this emphasis for the selected profile
      if (m.enfasis && m.enfasis[selectedPerfil]) {
        emphasisMatch = m.enfasis[selectedPerfil].includes(selectedEmphasis);
      }
    }
    
    // Check dictation semester filter
    let dictationMatch = true;
    if (selectedDictationSemester !== 'all') {
      if (!m.dictation_semester) {
        // Default value if not specified (backward compatibility)
        // Odd-numbered semester subjects are taught in odd semesters, even in even semesters
        const defaultDictation = m.semestre % 2 === 1 ? '1' : '2';
        dictationMatch = selectedDictationSemester === 'both' ? false : selectedDictationSemester === defaultDictation;
      } else {
        // Check the actual dictation semester value
        if (selectedDictationSemester === 'both') {
          dictationMatch = m.dictation_semester === 'both';
        } else {
          dictationMatch = m.dictation_semester === selectedDictationSemester || m.dictation_semester === 'both';
        }
      }
    }
    
    // Check exam-only filter
    const examOnlyMatch = !showExamOnlySubjects || (m.exam_only === true);
    
    // Check credit filter
    let creditMatch = true;
    if (selectedCreditFilter !== 'all' && m.creditos) {
      if (selectedCreditFilter === 'less10') {
        creditMatch = m.creditos < 10;
      } else if (selectedCreditFilter === 'more10') {
        creditMatch = m.creditos >= 10;
      }
    }
    
    return profileMatch && emphasisMatch && dictationMatch && examOnlyMatch && creditMatch;
  });
  
  // Group by semester
  const semesterGroups = {};
  filteredMaterias.forEach(m => {
    if (m && m.semestre !== undefined) {
      const semester = m.semestre;
      if (!semesterGroups[semester]) {
        semesterGroups[semester] = [];
      }
      semesterGroups[semester].push(m);
    }
  });
  
  // Create the semester rows with better styling and information
  let html = '';
  Object.keys(semesterGroups).sort((a, b) => Number(a) - Number(b)).forEach(semester => {
    html += `
    <div class="semester-row">
      <div class="semester-label">Semestre ${semester}</div>
      ${semesterGroups[semester].map(subject => {
        // Get the status class
        const status = getSubjectStatus(subject);
        let statusClass = status;
        
        // Get dictation semester text
        let dictationText = '';
        if (subject.dictation_semester) {
          if (subject.dictation_semester === 'both') {
            dictationText = 'Ambos semestres';
          } else if (subject.dictation_semester === '1') {
            dictationText = 'Semestre impar';
          } else if (subject.dictation_semester === '2') {
            dictationText = 'Semestre par';
          }
        }
        
        // Generate prerequisites info for tooltip
        let prereqInfo = '';
        if (subject.prerequisitos && subject.prerequisitos.length > 0) {
          const prereqsList = subject.prerequisitos.map(p => {
            const requiresExoneration = p.requiere_exoneracion || false;
            const requiresCourse = p.requiere_curso || true;
            
            let reqType = '';
            if (requiresExoneration) {
              reqType = '(exon)';
            } else if (requiresCourse) {
              reqType = '(curso)';
            }
            
            return `${p.codigo}${reqType}`;
          }).join(', ');
          
          prereqInfo = `Previas: ${prereqsList}`;
        }
        
        // Add special tags for Control profile courses
        const controlTags = [];
        if (selectedPerfil === 'Control') {
          if (subject.core) {
            controlTags.push('<span class="tag-badge core-badge">Core</span>');
          } else if (subject.opcional_perfil) {
            controlTags.push('<span class="tag-badge opcional-badge">Opcional</span>');
          } else if (subject.opcional_sugerida) {
            controlTags.push('<span class="tag-badge sugerida-badge">Sugerida</span>');
          }
        }
        
        return `
          <div 
            class="subject-btn ${statusClass}" 
            data-code="${subject.codigo}"
            onclick="toggleSubjectStatus('${subject.codigo}')"
            title="${subject.nombre} (${subject.creditos} créditos)${prereqInfo ? '\n' + prereqInfo : ''}"
          >
            <span class="code">${subject.codigo}</span>
            ${subject.nombre.length > 22 ? subject.nombre.substring(0, 20) + '...' : subject.nombre}
            <span class="credits">${subject.creditos} créditos</span>
            ${dictationText ? `<span class="dictation">${dictationText}</span>` : ''}
            ${subject.exam_only ? `<span class="exam-only">Libre</span>` : ''}
            ${controlTags.join('')}
          </div>
        `;
      }).join('')}
    </div>`;
  });
  
  treeContainer.innerHTML = html;
  updateStatusPanel();
}

function getSubjectStatus(subject) {
  // Check if subject is exonerated
  if (exoneratedSubjects.has(subject.codigo)) {
    return 'exonerated';
  }
  
  // Check if subject is approved but not exonerated
  if (approvedSubjects.has(subject.codigo)) {
    return 'approved';
  }
  
  // Check if subject is available based on prerequisites
  if (!isSubjectAvailable(subject)) {
    return 'unavailable';
  }
  
  // Subject is not approved and is available
  return 'available';
}

function isSubjectAvailable(subject) {
  // If no prerequisites, subject is always available
  if (!subject.prerequisitos || subject.prerequisitos.length === 0) {
    return true;
  }
  
  // Check if all prerequisites are satisfied
  return subject.prerequisitos.every(prereq => {
    const isExonerated = exoneratedSubjects.has(prereq.codigo);
    const isApproved = approvedSubjects.has(prereq.codigo);
    
    // If prerequisite requires exoneration
    if (prereq.requiere_exoneracion) {
      return isExonerated;
    }
    
    // If prerequisite requires course
    if (prereq.requiere_curso) {
      return isExonerated || isApproved;
    }
    
    // Default case (requires course)
    return isExonerated || isApproved;
  });
}

function toggleSubjectStatus(code) {
  const subject = materias.find(m => m.codigo === code);
  if (!subject) return;
  
  // If subject is not available, do nothing
  if (!isSubjectAvailable(subject) && !approvedSubjects.has(code) && !exoneratedSubjects.has(code)) {
    return;
  }
  
  if (exoneratedSubjects.has(code)) {
    // If already exonerated, remove from both sets
    exoneratedSubjects.delete(code);
    totalCredits -= subject.creditos;
  } else if (approvedSubjects.has(code)) {
    // If already approved but not exonerated, change to exonerated
    approvedSubjects.delete(code);
    exoneratedSubjects.add(code);
  } else {
    // If not approved or exonerated, add to approved
    approvedSubjects.add(code);
    totalCredits += subject.creditos;
  }
  
  renderGraph();
}

function updateStatusPanel() {
  const approvedCount = approvedSubjects.size;
  const exoneratedCount = exoneratedSubjects.size;
  const totalCount = approvedCount + exoneratedCount;
  
  document.getElementById('totalSubjects').textContent = totalCount;
  document.getElementById('approvedSubjects').textContent = approvedCount;
  document.getElementById('exoneratedSubjects').textContent = exoneratedCount;
  document.getElementById('totalCredits').textContent = totalCredits;
}

// Add a link to the graph view in the original index.html
function addLinkToIndex() {
  const mainElement = document.querySelector('main');
  if (mainElement) {
    const linkDiv = document.createElement('div');
    linkDiv.style.textAlign = 'center';
    linkDiv.style.marginTop = '30px';
    linkDiv.innerHTML = '<a href="index.html" class="link" id="link-to-list" style="font-size: 1.1rem; padding: 10px;">Ver Listado de Materias</a>';
    mainElement.appendChild(linkDiv);
  }
}

// Load the data when the page loads
window.addEventListener('DOMContentLoaded', () => {
  load();
  addLinkToIndex();
});
